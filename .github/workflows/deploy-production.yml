name: Deploy to production

on:
  pull_request:
    branches:
      - main
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Set up Python and Install BuildDeck
        uses: rmhy-tech/setup-builddeck@v1.0.1
        with:
          python-version: '3.9'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        run: |
          builddeck --env=prod build

      - name: Generate docker-compose.yml
        run: builddeck --env=prod compose

      - name: Create SSH key file
        run: |
          echo "${{ secrets.LINODE_SSH_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa

      - name: Check SSH key file exists and print first few lines
        run: |
          ls -la /tmp/id_rsa
          echo "First few lines of the key:"
          head -n 5 /tmp/id_rsa

      - name: Copy file using scp directly
        run: |
          scp -i /tmp/id_rsa -o StrictHostKeyChecking=no docker-compose.yml root@${{ secrets.LINODE_HOST }}:/mereb/prod

      - name: Create .env file
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Copy .env to Linode instance
        run: |
          scp -i /tmp/id_rsa -o StrictHostKeyChecking=no .env root@${{ secrets.LINODE_HOST }}:/mereb/prod

      - name: Verify file transfer to Linode instance
        run: |
          ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.LINODE_HOST }} "ls -la /mereb/prod/docker-compose.yml"
          ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.LINODE_HOST }} "ls -la /mereb/prod/.env"

      - name: Run Docker Compose commands on Linode instance
        run: |
          ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.LINODE_HOST }} "cd /mereb/prod && docker compose -f docker-compose.yml down && docker compose -f docker-compose.yml up -d --build"


      - name: Cleanup .env file
        run: rm .env

      - name: Cleanup docker-compose.yml file
        run: rm docker-compose.yml

      - name: SSH and Run Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.LINODE_HOST }}
          username: ${{ secrets.LINODE_USERNAME }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          script: |
            cd /mereb/prod
            docker compose down
            docker compose -f docker-compose.yml up -d --build

  test:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
        - name: Wait for all services to be healthy
          uses: appleboy/ssh-action@v0.1.5
          with:
            host: ${{ secrets.LINODE_HOST }}
            username: ${{ secrets.LINODE_USERNAME }}
            key: ${{ secrets.LINODE_SSH_KEY }}
            script: |
              echo "Checking health status for all services..."
              cd /mereb/prod || { echo "Failed to change directory"; exit 1; }

              # Specify the custom Docker Compose file name
              COMPOSE_FILE="docker-compose.yml"

              # Check if the specified Docker Compose file exists
              if [ ! -f "$COMPOSE_FILE" ]; then
                echo "$COMPOSE_FILE file not found in $(pwd)"
                exit 1
              fi

              services=$(docker compose -f "$COMPOSE_FILE" config --services)
              for service in $services; do
                for i in {1..10}; do
                  if [ "$(docker inspect --format='{{.State.Health.Status}}' $service)" == "healthy" ]; then
                    echo "$service is healthy!"
                    break
                  fi
                  if [ "$i" -eq 10 ]; then
                    echo "$service did not become healthy in time."
                    exit 1
                  fi
                  echo "Waiting for $service to be healthy..."
                  sleep 10
                done
              done
        - uses: actions/checkout@v4
        - name: Install Postman CLI
          run: |
            curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
        - name: Login to Postman CLI
          run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
        - name: Run API tests
          run: |
            postman collection run "9308902-0a694884-e0dd-456c-a196-d33fb747b4fa" -e "9308902-2f7ffbfa-ea7c-4bb8-aa2f-83b5ec46f1f3"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy, test]

    steps:
      - name: Send Telegram message on PR creation and merge success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode="HTML" \
            -d text="✅ <strong>Production Deployed!</strong>
          <blockquote><b>Workflow:</b> <b>${{ github.workflow }}</b>
          <b>Repository:</b> <code>${{ github.repository }}</code>
          <b>Branch:</b> <code>${{ github.ref_name }}</code>
          <b>Author:</b> <code>${{ github.actor }}</code>
          <b>API URL:</b> <a href="https://api.mereb.app">Mereb API</a></blockquote>"

      - name: Send Slack notification on failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode="HTML" \
            -d text="❌ <strong>Production Deployment Failed!</strong>
          <blockquote><b>Workflow:</b> <b>${{ github.workflow }}</b>
          <b>Repository:</b> <code>${{ github.repository }}</code>
          <b>Branch:</b> <code>${{ github.ref_name }}</code>
          <b>Author:</b> <code>${{ github.actor }}</code></blockquote>"